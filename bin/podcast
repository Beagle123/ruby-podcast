#!/usr/bin/env ruby

# == Synopsis
#
# Generate a podcast file from a directory of mp3 files. All subdirectories
# below indicated directory will be searched. 
#
# == Usage
# 
#   podcast --dir my/mp3/dir --out podcast.rss --title "Title" --description "Description" --link http://mypodcastserver/
#
# == Author
# Ed Summers <ehs@pobox.com>
# Darren Greaves https://github.com/boncey
#
# == Copyright
# Copyright (c) 2004 Ed Summers.
# Licensed under the same terms as Ruby.


require 'optparse'
require 'rubygems'
require_relative './../lib/podcast.rb' 


def halt(opts)
  puts 'podcast --dir my/mp3/dir --out podcast.rss --title "Title" --description "Description" --link http://mypodcastserver/'
  puts "Version: #{Podcast::NAME}"
  puts opts.help
  exit
end

# create podcast object
podcast = Podcast::Feed.new()

dir = podcast_file = version = nil

# read options
opts = OptionParser.new
opts.on("-d", "--dir VAL", String)        { |val| dir=val }
opts.on("-o", "--out VAL", String)        { |val| podcast_file=val }
opts.on("-b", "--base VAL", String)        { |val| podcast.base=val }
opts.on("-l", "--link VAL", String)        { |val| podcast.link=val }
opts.on("-t", "--title VAL", String)        { |val| podcast.title=val }
opts.on("-a", "--about VAL", String)        { |val| podcast.about=val }
opts.on("-i", "--image VAL", String)        { |val| podcast.image=val }
opts.on("-v", "--version VAL", String)        { |val| version=val }
opts.on("-e", "--description VAL", String)        { |val| podcast.description=val }

begin
  opts.parse(ARGV)
rescue => e
  halt(opts)
end

# the location to look for mp3s (always valid)
dir = File.directory?(dir.to_s) ? dir : Dir.pwd
dir = File.expand_path(dir)  

# the location to write the podcast file (always valid)
podcast_file ||= "podcast.rss"

# the podcast parameters set by the user
version ||= "2.0"

# unless everything works... (don't need to test dir, always valid)
halt(opts) unless podcast.valid?

# add a directory
podcast.add_dir(dir)

# write off the rss
puts "Total FIles:  #{podcast.podcast_files.size.to_s}"
puts "Outputting podcast to:  #{podcast_file}"
puts "Used RSS version #{version}"
file = File.new(podcast_file, 'w')
file.write(podcast.get_rss(version)) # if version is nil defaults to "1.0"
file.close
puts "Done!  #{podcast.about}"

